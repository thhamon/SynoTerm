#!@PERL@
# 	$Log: NettoyageLI.pl.in,v $
# 	Revision 1.3  2006/05/19 11:06:24  ht
# 	correction dans les fichiers .pl et .pl.in
# 	
# 	Revision 1.2  2006/05/19 11:01:13  ht
# 	ajout d'évènement, correction de bug dans le makefile
# 	
# 	Revision 1.1.1.1  2006/05/03 11:35:11  ht
# 	SynoTerm - Environnement d'acquisition de relations sémantiques entre termes
# 	
# 	Revision 1.3  2001/05/20 15:02:38  thierry
# 	*** empty log message ***
#
# 	Revision 1.2  2001/05/01 18:55:18  thierry
# 	*** empty log message ***
#	

#$ligne = <STDIN>
#print "Dans  LiensInferes"
while ($ligne = <STDIN>) {
    $ligne =~ /<LIEN ID=([0-9]+_[0-9]+) TYPE=([^>]+)/;
    $idlien = $1;
    $typelien = $2;
    #print "$idlien;$typelien\n";
    
    $ligne = <STDIN>;
    $ligne =~ /<FROM R=([^>]+)>([^<]+<=>[^<]+)<\/FROM>/;
    $regle = $1;
    $lienorig = $2;
    #print "$regle;$lienorig\n";

	# Lecture du premier terme du lien infere
    $ligne = <STDIN>;
    $ligne =~ /<GEN>(.+)$/;
    $TermeI1 = $1;
    #chop $TermeI1;
    #print "$TermeI1\n";
    
	# Lecture des identifiants de GNMAX et de phrases
    $ligne = <STDIN>;
    $ligne =~ /<CT>([^<]+)$/;
    $Identifiants1 = $1;
    chop $Identifiants1;
    #print "$Identifiants1\n";

    #@lst_id1 = split /\$/, $Identifiants1;
    
    $ligne = <STDIN>;
    
	# Lecture du deuxieme terme du lien infere
    $ligne = <STDIN>;
    $ligne =~ /<=> (.+)$/;
    $TermeI2 = $1;
    #chop $TermeI2;
    #print "$TermeI2\n";

	# Lecture des identifiants de GNMAX et de phrases
    $ligne = <STDIN>;
    $ligne =~ /<CT>([^<]+)$/;
    $Identifiants2 = $1;
    chop $Identifiants2;
    #print "$Identifiants2\n";
		
    #@lst_id2 = split /\$/, $Identifiants2;
    #foreach $elmt (split /\$/, $Identifiants2) {
#	$lst_id2{$elmt}++;
#    }
    $ligne = <STDIN>;
    $ligne = <STDIN>;
		
	# Validation du Lien
    $ligne = <STDIN>;
    $ligne =~ />([^<]*)</;
    $val = $1;
    chop $val;
    $ligne = <STDIN>;

	# Ajout dans les tables
    
    	$lst_termesI{"$TermeI1 <=> $TermeI2"} = $lst_termesI{"$TermeI1 <=> $TermeI2"} . "$regle:$idlien:$typelien:$lienorig:$val" . "\|";
	$lst_id1{"$TermeI1 <=> $TermeI2"} = $lst_id1{"$TermeI1 <=> $TermeI2"} . $Identifiants1 . "\$";
	$lst_id2{"$TermeI1 <=> $TermeI2"} = $lst_id2{"$TermeI1 <=> $TermeI2"} . $Identifiants2 . "\$";
	#$tmp = $lst_termesI{"$TermeI1 <=> $TermeI2"};
	#print "\n$tmp\n";

}

foreach $lienI (sort keys %lst_termesI) {
    %RegleI = ();
    %idI = ();
    %typeI = ();
    %lienO = ();
    %valid = ();
    $tmp = $lst_termesI{$lienI};
    #print "$tmp\n";
    chop $tmp;
    @info_orig=split /\|/,$tmp;
    foreach $info (@info_orig) {
        ($r,$id,$tl,$lo,$v) = split /:/,$info;
    	$RegleI{$r}++;
    	$idI{$id}++;
    	$typeI{$tl}++;
    	$lienO{$lo}++;
	$valid{$v}++;
    }
    $regle = "";
    foreach $rg (sort keys %RegleI) {
	$regle = $regle . $rg . ",";
    }
    chop($regle);
    $idlien = "";
    foreach $id (sort keys %idI) {
	$idlien = $idlien . $id . ",";
    }
    chop($idlien);
    $typeL = "";
    foreach $tl (sort keys %typeI) {
	$typeL = $typeL . $tl . ",";
    }
    chop($typeL);
    $L_O = "";
    foreach $l (sort keys %lienO) {
	$L_O = $L_O . $l . ",";
    }
    chop($L_O);
    $VAL = "";
    foreach $v (sort keys %valid) {
	$VAL = $VAL . $v . ",";
    }
    chop($VAL);
    $tmp = $lst_id1{$lienI};
    chop $tmp;
    @ident1 = split /\$/, $tmp;
    %idphr = ();
    foreach $id (@ident1) {
    	$idphr{$id}++;
    }
    $idp1 = "";
    foreach $id (sort keys %idphr) {
    	$idp1 = $idp1 . $id . "\$";
    }
    chop $idp1;
    
    $tmp = $lst_id2{$lienI};
    chop $tmp;
    @ident2 = split /\$/, $tmp;
    %idphr = ();
    foreach $id (@ident2) {
    	$idphr{$id}++;
    }
    
    $idp2 = "";
    foreach $id (sort keys %idphr) {
    	$idp2 = $idp2 . $id . "\$";
    }
    chop $idp2;

    ($Trm1,$Trm2) = split / <=> /,$lienI;
    print "<LIEN ID=\"$idlien\" TYPE=\"$typeL\">\n";
    print "<FROM R=\"$regle\">\"$L_O\"</FROM>\n";
    print "<GEN>$Trm1\n";
    print "<CT>$idp1\n";
    print "</CT>\n";
    print "<=> $Trm2\n";
    print "<CT>$idp2\n";
    print "</CT>\n";
    print "</GEN>\n";
    print "<VAL>$VAL</VAL>\n";
    print "</LIEN>\n";
}

/*	$Log: ChargRes.fl,v $
/*	Revision 1.2  2006/11/30 17:28:51  ht
/*	corrections
/*	intégration partielle de la possiblité d'ajouter les réuslts extérieurs tels que
/*	ceux de Faster (a continuer)
/*	
/*	Revision 1.1.1.1  2006/05/03 11:35:11  ht
/*	SynoTerm - Environnement d'acquisition de relations sémantiques entre termes
/*	
 *	Revision 1.3  2001/05/01 19:15:40  thierry
 *	Correction des commentaires de log
 *
 *	Revision 1.2  2001/05/01 19:05:21  thierry
 *	*** empty log message ***
 */	
%{
/**********************************************************************
 *
 * Last Update: 01/09/1999 (mm/dd/yyyy date format)
 *
 * Copyright (C) 1999 Thierry Hamon
 *
 * Released under GPL, written by thierry.hamon@lipn.univ-paris13.fr
 *
 * Author : Thierry Hamon (PhD student in CS and "Penguin-phile")
 * Email : thierry.hamon@lipn.univ-paris13.fr
 * URL : http://www-lipn.univ-paris13.fr/~hamon
 *
 *********************************************************************/
#include "Synonymie.h"
#include "stringSGML.h"
#include "VarSem.h"
/*#include ""*/

#define TailleLM 3000

int idTI1, idTI2, idTO1, idTO2;
char LMTI1[TailleLM], LMTI2[TailleLM];
char LMTO01[TailleLM], LMTO02[TailleLM];
char LMTO11[TailleLM], LMTO12[TailleLM];
char *INFOTI1, *INFOTI2;
char typel[10];
int typeR = 0, val = 0;;

%}
%start normal IDENTIFTI TYPEL LIENO LEMMETO11 LEMMETO12 LEMMETO01 LEMMETO02 LEMMETI1 LEMMETI2 IDENTIFTO01 IDENTIFTO11 IDGNMPHR1 IDGNMPHR2 VALID IDENTIFTO02 IDENTIFTO12 LIENO2
%%
	BEGIN normal ;

<normal>"<LIEN ID="	{
		/* Debut de la lecture du lien */
		typeR = 0;
		BEGIN IDENTIFTI ;
		} 

<IDENTIFTI>-?[0-9]+/"_"	{
		/* Identifiant du terme infere numero 1 */
		idTI1 = atoi(ChRestext);
		}

<IDENTIFTI>-?[0-9]+/" "	{
		/* Identifiant du terme infere numero é */
		idTI2 = atoi(ChRestext);
		}

<IDENTIFTI>"_"	{/* Trash */}

<IDENTIFTI>" "	{
		/* Debut type de relation */
		BEGIN TYPEL ;
		}

<TYPEL>"TYPE="	{/* Trash */}

<TYPEL>[A-Za-z]+">"\n	{
		/* Type de relation */
		strcpy(typel,ChRestext);
		typel[ChResleng-2] = 0;
		BEGIN LIENO ;
		}

<LIENO>^"<FROM R=1>"	{
		/* Lien infere a partir de la regle 1 */
		typeR = 1;
		BEGIN LEMMETO11 ;
		}
<LIENO>^"<FROM R=2>"	{
		/* Lien infere a partir de la regle 2 */
		typeR = 2;
		BEGIN LEMMETO11 ;
		}
<LIENO>^"<FROM R=3>"	{
		/* Lien infere a partir de la regle 3 */
		typeR = 3;
		BEGIN LEMMETO01 ;
		}

<LIENO2>^"<FROM R=3>"	{
		/* Lien infere a partir de la regle 3 */
		typeR = 3;
		BEGIN LEMMETO11 ;
		}

<LEMMETO01>[^\(]+	{
		/* Lemme du premier terme du lien initial */
		strcpy(LMTO01,ChRestext);
		BEGIN IDENTIFTO01;
		}
<LEMMETO02>") <=> "	{
		/* Separation des deux lemmes des termes inferes */
		}

<LEMMETO02>[^\)\(]+	{
		/* lemme du deuxieme terme du lien initial */
		strcpy(LMTO02,ChRestext);
		BEGIN IDENTIFTO02;
		}


<IDENTIFTO01>"("		{ /* Trash */}

<IDENTIFTO01>-?[0-9]+/") <"	{
		/* identifiant du premier terme infere */
		idTO1 = atoi(ChRestext);
		BEGIN LEMMETO02 ;
		}

<IDENTIFTO02>"("	{ /* Trash */}

<IDENTIFTO02>-?[0-9]+/")<"	{
		/* identfiant du deuxieme terme infere */
		idTO2 = atoi(ChRestext);
		}

<IDENTIFTO02>")<"[^\n]+\n	{
		/* Trash */
		BEGIN LIENO2 ;
		}

<LEMMETO11>[^\(]+	{
		/* Lemme du premier terme du lien initial */
		strcpy(LMTO11,ChRestext);
		BEGIN IDENTIFTO11;
		}
<LEMMETO12>") <=> "	{
		/* Separation des deux lemmes des termes inferes */
		}

<LEMMETO12>[^\)\(]+	{
		/* lemme du deuxieme terme du lien initial */
		strcpy(LMTO12,ChRestext);
		BEGIN IDENTIFTO12;
		}

<IDENTIFTO11>"("	{ /* Trash */}

<IDENTIFTO11>-?[0-9]+/") <"	{
		/* identifiant du premier terme infere */
		idTO1 = atoi(ChRestext);
		BEGIN LEMMETO12 ;
		}

<IDENTIFTO12>"("	{ /* Trash */}

<IDENTIFTO12>-?[0-9]+/")<"	{
		/* identfiant du deuxieme terme infere */
		idTO2 = atoi(ChRestext);
		}


<IDENTIFTO12>")<"[^\n]+\n	{
		/* Trash */
		BEGIN LEMMETI1 ;
		}

<LEMMETI1>^"<GEN>"	{/* Trash */}

<LEMMETI1>[^<>\n]+\n	{
		/* lemme du premier terme infere */
		strcpy(LMTI1,ChRestext);
		LMTI1[ChResleng-1] = 0;
		BEGIN IDGNMPHR1 ;
		}

<IDGNMPHR1>^"<CT>"	{/* Trash */}

<IDGNMPHR1>^"</CT>"\n {/* Trash*/}

<IDGNMPHR1>^"<=> " {
		/* debut du deuxieme terme infere */
		BEGIN LEMMETI2 ;
		}

<IDGNMPHR1>[^<>\n]+\n	{
		/* Information sur le premier terme */
		INFOTI1=(char *)malloc((ChResleng+1) * sizeof(char));
		strcpy(INFOTI1,ChRestext);
		INFOTI1[ChResleng-1] = 0;
		}

<LEMMETI2>[^<>\n]+\n	{
		/* lemme du deuxieme terme infere */
		strcpy(LMTI2,ChRestext);
		LMTI2[ChResleng-1] = 0;
		BEGIN IDGNMPHR2 ;
		}

<IDGNMPHR2>^"<CT>"	{/* Trash */}

<IDGNMPHR2>^"</CT>"\n	{/* Trash*/}
<IDGNMPHR2>^"</GEN>"\n	{
		BEGIN VALID ;
			}

<IDGNMPHR2>[^<>\n]+\n	{
		/* Information sur le deuxieme terme */
		INFOTI2=(char *)malloc((ChResleng+1) * sizeof(char));
		strcpy(INFOTI2,ChRestext);
		INFOTI2[ChResleng-1] = 0;
		}
<VALID>^"<VAL>"	{/*Trash*/}

<VALID>-?[0-9]+	{
		val = atoi(ChRestext);
		}

<VALID>"</VAL>"\n	{/*Trash */}

<VALID>^"</LIEN>"\n	{
		AjoutTypeLien(typel, val & TYPELIEN);
		AjoutLien_int(idTI1, idTI2, /*valch2valint(typel) | */val /*| typeR*/);
		free(INFOTI1);
		free(INFOTI2);
		BEGIN normal ;
		}

. {ECHO ;}
	
%%
int ChReswrap()
{
        return(1);
}


int Charge_Res(char *nom_Res, int flux_ecriture)
{
    FILE *FichRes;
    char c[1000];
	
    if ((FichRes = fopen(nom_Res,"r"))==NULL){
	fprintf(stderr,"Ouverture du fichier de Resultat impossible\n");
	writelogS("Ouverture du fichier de Resultat impossible");
	exit(-1);
    }
    ChResin = FichRes;
    writelogS("Appel de la fonction ChRes");

    ChReslex();
    fclose(FichRes);

    print_com_msg(ENVOI_DEBUT_INFERENCE,flux_ecriture,OUI);

    writelogS("DebutInfer");
    if ((FichRes = fopen(nom_Res,"r"))==NULL){
	fprintf(stderr,"Ouverture du fichier de Resultat impossible\n");
	writelogS("Ouverture du fichier de Resultat impossible");
	exit(-1);
    }
    /* A Revoir */
    do {
    	if (fread(c,sizeof(char),1,FichRes)!=0) {
	    c[1] = 0;
	    print_com_msg(c,flux_ecriture,NON);
	}
    } while(!feof(FichRes));
    fclose(FichRes);

    print_com_msg(ENVOI_FIN_INFERENCE,flux_ecriture,OUI);
    writelogS("FinInfer");
    writelogS("fin de l'analyse du fichier de Resultat");
}

/*
main()
{
  printf("Terme1 Lemmatise;Terme2 Lemmatise;Validation;Type de Lien");
  ChReslex();
}

*/

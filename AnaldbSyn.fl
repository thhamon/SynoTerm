/*	$Log: AnaldbSyn.fl,v $
/*	Revision 1.2  2007/08/01 08:48:17  ht
/*	modification of the Makefile
/*	bug fixes
/*	addition of the functionality allowing to load WordNet from WordNet file
/*	
/*	Revision 1.1.1.1  2006/05/03 11:35:11  ht
/*	SynoTerm - Environnement d'acquisition de relations sémantiques entre termes
/*	
 *	Revision 1.3  2001/05/01 19:10:25  thierry
 *	*** empty log message ***
 *
 *	Revision 1.2  2001/05/01 19:06:29  thierry
 *	*** empty log message ***
 */	
%{
/*
 * Analyse du Dictionnaire tri\'e et sans doublons
 * 
 */
#include <stdlib.h>
/*#include "VarSem.h"*/
#include "ChargDonnees.h"
char *mot1,*mot2;
int len,nb;
%}
%start normal ENTREE SYNONYME SEP FL
%%

	BEGIN normal ;

<FL>\n	{ 
	  fprintf(DicoWDbl,"%s : %s : %d\n",mot1,mot2,nb);
	  free(mot1);
	  free(mot2);
	  BEGIN normal ;
	}

<normal>^[ ]*[0-9]+[ \t]* {
	  nb = atoi(dbSyntext);
	  BEGIN ENTREE ;
	}

<SEP>":"[ ]*	{ BEGIN SYNONYME ;
		}

<ENTREE>[^:]+	{ mot1 = (char *)malloc(dbSynleng+1);
	  strcpy(mot1,dbSyntext);
	  len = dbSynleng-1;
	  while(mot1[len] == ' '){
		mot1[len] = 0;
		len--;
	  }
	  BEGIN SEP ;
	}

<SYNONYME>[^:\n]+	{ mot2 = (char *)malloc(dbSynleng+1);
	  strcpy(mot2,dbSyntext);
	  len = dbSynleng-1;
	  while(mot2[len] == ' '){
		mot2[len] = 0;
		len--;
	  }
	  BEGIN FL ;
	}

.	{/*fprintf(stderr,"%s",dbSyntext);*/}

%%

int dbSynwrap()
{
	return(1);
}
